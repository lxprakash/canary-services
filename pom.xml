<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.intigna.services.canary</groupId>
	<artifactId>canary-services</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>canary-services</name>
	<description> Canary Services</description>

	<!-- parent pom has deploy information, repositories -->
	<parent>
		<groupId>com.intigna.build</groupId>
		<artifactId>parent-pom</artifactId>
		<version>1.0-SNAPSHOT</version>
	</parent>

	<scm>
		<connection>scm:git:git@github.com:intigna/canary-services.git</connection>
		<developerConnection>scm:git:git@github.com:intigna/canary-services.git</developerConnection>
		<url>https://github.com/intigna/canary-services</url>
	</scm>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.jboss.arquillian</groupId>
				<artifactId>arquillian-bom</artifactId>
				<version>1.1.13.Final</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${jdk.version}</source>
					<target>${jdk.version}</target>
				</configuration>
			</plugin>

			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>fabric8-maven-plugin</artifactId>
				<version>${fabric8.version}</version>
				<executions>
					<execution>
						<id>json</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>json</goal>
						</goals>
					</execution>
					<execution>
						<id>attach</id>
						<phase>package</phase>
						<goals>
							<goal>attach</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.jolokia</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>${docker.maven.plugin.version}</version>
				<configuration>
					<images>
						<image>
							<name>${docker.image}</name>
							<build>
								<from>${docker.from}</from>
								<assembly>
									<descriptorRef>${docker.assemblyDescriptorRef}</descriptorRef>
								</assembly>
								<env>
									<CATALINA_OPTS>-Xmx512m -Xms384m
										-javaagent:/opt/agent-bond/agent-bond.jar</CATALINA_OPTS>
								</env>
							</build>
						</image>
					</images>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<dependencies>
		<!-- DC Services Common Support Starts Here -->
		<dependency>
			<groupId>com.datacode2.microservices</groupId>
			<artifactId>dc-service-commons</artifactId>
			<version>0.0.9-SNAPSHOT</version>
		</dependency>
		<!-- DC Services Common Support Ends Here -->
		
		<dependency>
		    <groupId>org.jboss.shrinkwrap.resolver</groupId>
		    <artifactId>shrinkwrap-resolver-impl-maven</artifactId>
		    <scope>test</scope>
		</dependency>
		
		<dependency>
		    <groupId>org.jboss.arquillian.junit</groupId>
		    <artifactId>arquillian-junit-container</artifactId>
		    <scope>test</scope>
		</dependency>
		
		<dependency>
	      <groupId>org.jboss.arquillian.container</groupId>
	      <artifactId>arquillian-jetty-embedded-9</artifactId>
	      <version>1.0.0.CR3</version>
	      <scope>test</scope>
	    </dependency>

		<dependency>
		    <groupId>org.eclipse.jetty.aggregate</groupId>
		    <artifactId>jetty-all</artifactId>
		    <version>9.3.20.v20170531</version>
		    <scope>test</scope>
		    <type>pom</type>
		</dependency>
		
	</dependencies>

	<properties>
		<fabric8.version>2.2.183</fabric8.version>
		<docker.maven.plugin.version>0.13.6</docker.maven.plugin.version>
		<docker.from>fabric8/tomcat-8</docker.from>
		<fabric8.dockerUser>sematree/</fabric8.dockerUser>
		<docker.image>${fabric8.dockerUser}${project.artifactId}:${project.version}</docker.image>
		<docker.assemblyDescriptorRef>rootWar</docker.assemblyDescriptorRef>
		<docker.port.container.jolokia>8778</docker.port.container.jolokia>
		<docker.port.container.http>8080</docker.port.container.http>

		<fabric8.service.name>${project.artifactId}</fabric8.service.name>
		<fabric8.service.port>8080</fabric8.service.port>
		<fabric8.service.containerPort>8080</fabric8.service.containerPort>
		<fabric8.annotations.service.apiman.io.servicePath></fabric8.annotations.service.apiman.io.servicePath>
		<fabric8.annotations.service.apiman.io.serviceType>REST</fabric8.annotations.service.apiman.io.serviceType>
		<fabric8.annotations.service.apiman.io.descriptionPath>phx-master-data/swagger.json</fabric8.annotations.service.apiman.io.descriptionPath>
		<fabric8.annotations.service.apiman.io.descriptionType>SwaggerJSON</fabric8.annotations.service.apiman.io.descriptionType>

		<!-- fabric8.env.AB_JOLOKIA_AUTH_OPENSHIFT>true</fabric8.env.AB_JOLOKIA_AUTH_OPENSHIFT -->
		<fabric8.label.component>${project.artifactId}</fabric8.label.component>
		<fabric8.label.container>tomcat</fabric8.label.container>
		<fabric8.label.group>activity-management</fabric8.label.group>
		<fabric8.iconRef>tomcat</fabric8.iconRef>

		<!-- label this service correctly -->
		<fabric8.label.provider>sematree</fabric8.label.provider>
		<fabric8.annotations.service.api.service.openshift.io.api-manager>apiman</fabric8.annotations.service.api.service.openshift.io.api-manager>
		<fabric8.annotations.service.api.service.kubernetes.io.protocol>REST</fabric8.annotations.service.api.service.kubernetes.io.protocol>

		<!-- mounting the secret -->
		<fabric8.volume.project.secret>${project.artifactId}.properties</fabric8.volume.project.secret>
		<fabric8.volume.project.mountPath>/secret</fabric8.volume.project.mountPath>

		<!-- prepare readiness probe -->
		<!-- <fabric8.readinessProbe.httpGet.path>/canary/healthchecks/ping</fabric8.readinessProbe.httpGet.path> 
			<fabric8.readinessProbe.httpGet.port>8080</fabric8.readinessProbe.httpGet.port> 
			<fabric8.readinessProbe.initialDelaySeconds>5</fabric8.readinessProbe.initialDelaySeconds> 
			<fabric8.readinessProbe.timeoutSeconds>30</fabric8.readinessProbe.timeoutSeconds> -->

		<!-- prepare livelness probe -->
		<!-- <fabric8.livenessProbe.httpGet.path>/canary/healthchecks</fabric8.livenessProbe.httpGet.path> 
			<fabric8.livenessProbe.httpGet.port>8080</fabric8.livenessProbe.httpGet.port> 
			<fabric8.livenessProbe.initialDelaySeconds>5</fabric8.livenessProbe.initialDelaySeconds> 
			<fabric8.livenessProbe.timeoutSeconds>30</fabric8.livenessProbe.timeoutSeconds> -->

		<!-- Resource Constraints -->
		<fabric8.resources.limits.cpu>500m</fabric8.resources.limits.cpu>
		<fabric8.resources.limits.memory>576Mi</fabric8.resources.limits.memory>

		<jdk.version>1.8</jdk.version>
	</properties>


	<profiles>
		<profile>
			<id>f8-build</id>
			<build>
				<defaultGoal>clean install docker:build fabric8:json</defaultGoal>
			</build>
		</profile>
		<profile>
			<id>f8-deploy</id>
			<properties>
				<fabric8.imagePullPolicySnapshot>Always</fabric8.imagePullPolicySnapshot>
				<fabric8.recreate>true</fabric8.recreate>
			</properties>
			<build>
				<defaultGoal>clean install docker:build docker:push fabric8:json fabric8:apply</defaultGoal>
			</build>
		</profile>
		<profile>
			<id>f8-local-deploy</id>
			<properties>
				<fabric8.recreate>true</fabric8.recreate>
			</properties>
			<build>
				<defaultGoal>clean install docker:build fabric8:json fabric8:apply</defaultGoal>
			</build>
		</profile>
	</profiles>
</project>
